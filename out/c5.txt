1: void -> VOID
1: insertionSort -> ID
1: ( -> LPAR
1: int -> INT
1: arr -> ID
1: [ -> LBRACKET
1: ] -> RBRACKET
1: , -> COMMA
1: int -> INT
1: n -> ID
1: ) -> RPAR
2: { -> LCURLYBRACES
3: int -> INT
3: i -> ID
3: , -> COMMA
3: key -> ID
3: , -> COMMA
3: j -> ID
3: ; -> SEMI
4: for -> FOR
4: ( -> LPAR
4: i -> ID
4: = -> ASSIGN
4: 1 -> INT_VAL
4: ; -> SEMI
4: i -> ID
4: < -> LESS THAN
4: n -> ID
4: ; -> SEMI
4: i -> ID
4: ++ -> DECREMENT
4: ) -> RPAR
4: { -> LCURLYBRACES
5: key -> ID
5: = -> ASSIGN
5: arr -> ID
5: [ -> LBRACKET
5: i -> ID
5: ] -> RBRACKET
5: ; -> SEMI
6: j -> ID
6: = -> ASSIGN
6: i -> ID
6: - -> MINUS
6: 1 -> INT_VAL
6: ; -> SEMI
11: while -> WHILE
11: ( -> LPAR
11: j -> ID
11: >= -> MORE THAN/EQUALS
11: 0 -> INT_VAL
11: && -> LOGICAL AND
11: arr -> ID
11: [ -> LBRACKET
11: j -> ID
11: ] -> RBRACKET
11: > -> MORE THAN
11: key -> ID
11: ) -> RPAR
11: { -> LCURLYBRACES
12: arr -> ID
12: [ -> LBRACKET
12: j -> ID
12: + -> PLUS
12: 1 -> INT_VAL
12: ] -> RBRACKET
12: = -> ASSIGN
12: arr -> ID
12: [ -> LBRACKET
12: j -> ID
12: ] -> RBRACKET
12: ; -> SEMI
13: j -> ID
13: = -> ASSIGN
13: j -> ID
13: - -> MINUS
13: 1 -> INT_VAL
13: ; -> SEMI
14: } -> RCURLYBRACES
15: arr -> ID
15: [ -> LBRACKET
15: j -> ID
15: + -> PLUS
15: 1 -> INT_VAL
15: ] -> RBRACKET
15: = -> ASSIGN
15: key -> ID
15: ; -> SEMI
16: } -> RCURLYBRACES
17: } -> RCURLYBRACES
19: int -> INT
19: main -> ID
19: ( -> LPAR
19: ) -> RPAR
20: { -> LCURLYBRACES
21: int -> INT
21: arr -> ID
21: [ -> LBRACKET
21: ] -> RBRACKET
21: = -> ASSIGN
21: { -> LCURLYBRACES
21: 12 -> INT_VAL
21: , -> COMMA
21: 11 -> INT_VAL
21: , -> COMMA
21: 13 -> INT_VAL
21: , -> COMMA
21: 5 -> INT_VAL
21: , -> COMMA
21: 6 -> INT_VAL
21: } -> RCURLYBRACES
21: ; -> SEMI
22: int -> INT
22: n -> ID
22: = -> ASSIGN
22: sizeof -> SIZEOF
22: ( -> LPAR
22: arr -> ID
22: ) -> RPAR
22: / -> OVER
22: sizeof -> SIZEOF
22: ( -> LPAR
22: arr -> ID
22: [ -> LBRACKET
22: 0 -> INT_VAL
22: ] -> RBRACKET
22: ) -> RPAR
22: ; -> SEMI
24: insertionSort -> ID
24: ( -> LPAR
24: arr -> ID
24: , -> COMMA
24: n -> ID
24: ) -> RPAR
24: ; -> SEMI
26: return -> RETURN
26: 0 -> INT_VAL
26: ; -> SEMI
27: } -> RCURLYBRACES
